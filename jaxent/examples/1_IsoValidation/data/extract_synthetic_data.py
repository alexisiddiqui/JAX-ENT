"""

This script loads the sythetic data generated by the _Bradshaw "HDXer" tutorial and extracts the data into the format supported by ValDXer.


raw_data = "mixed_60-40_artificial_expt_resfracs.dat"

This will generate a dfrac file with the headers:
#	0.167   1.0 10.0    60.0    120.0	 times/min

and will then generate a segs file with no headers but columns:

res_start res_end

dfrac_file = "mixed_60-40_artificial_expt_resfracs_TeaA_dfrac.dat
seg_file = "mixed_60-40_artificial_expt_resfracs_TeaA_segs.txt"


"""

import os
import re

# Define file paths
input_file = "mixed_60-40_artificial_expt_resfracs.dat"
_bradshaw_tutorial_dir = "_Bradshaw/Reproducibility_pack_v2/data/artificial_HDX_data"
output_dfrac = "mixed_60-40_artificial_expt_resfracs_TeaA_dfrac.dat"
output_segs = "mixed_60-40_artificial_expt_resfracs_TeaA_segs.txt"

# Ensure output directory exists
output_dir = os.path.join(os.path.dirname(__file__), "_output")
os.makedirs(output_dir, exist_ok=True)

# Full paths for output files
output_dfrac_path = os.path.join(output_dir, output_dfrac)
output_segs_path = os.path.join(output_dir, output_segs)

# Read the raw data file
raw_data_path = os.path.join(os.path.dirname(__file__), _bradshaw_tutorial_dir, input_file)

# Use a custom parser since the data isn't in standard CSV/TSV format
print("Reading raw data file...")
with open(raw_data_path, "r") as f:
    lines = f.readlines()

# Extract header
header = lines[0].strip()
print(f"Header from file: {header}")

# Process data rows
data = []
segments = []

# Skip the header line
for line in lines[1:]:
    # Skip empty lines
    if not line.strip():
        continue

    # Split the line by whitespace
    # The format appears to be: "1 2   1.00000  1.00000  1.00000  1.00000  1.00000"
    # First two numbers are residue IDs, rest are deuteration fractions
    parts = re.split(r"\s+", line.strip())

    # Process line only if it has enough data
    if len(parts) >= 2:
        try:
            # Extract residue IDs (first two values)
            res_start = int(float(parts[0]))  # First residue ID
            res_end = int(float(parts[1]))  # Second residue ID
            segments.append((res_start, res_end))

            # Extract deuteration fractions (remaining values)
            # Filter out any empty strings that might come from extra spaces
            fractions = [float(val) for val in parts[2:] if val]

            # Only add if we have the expected number of fractions
            if len(fractions) == 5:  # Expecting 5 time points
                data.append(fractions)
            else:
                print(f"Warning: Line has unexpected number of fractions: {line.strip()}")

        except (ValueError, IndexError) as e:
            print(f"Error processing line: {line.strip()}")
            print(f"Error details: {e}")

# Define time points (as provided in the example)
time_values = [0.167, 1.0, 10.0, 60.0, 120.0]

print(f"Processed {len(data)} data rows and {len(segments)} segments")

# Create dfrac file
print("Creating dfrac file...")
with open(output_dfrac_path, "w") as f:
    # Write header with time points
    header = "#\t" + "\t".join(f"{t}" for t in time_values) + "\t times/min\n"
    f.write(header)

    # Write deuteration fractions
    for fractions in data:
        f.write("\t".join(f"{frac:.5f}" for frac in fractions) + "\n")

# Create segments file
print("Creating segments file...")
with open(output_segs_path, "w") as f:
    for res_start, res_end in segments:
        f.write(f"{res_start} {res_end}\n")

print("Files created successfully:")
print(f"Deuteration fractions: {output_dfrac_path}")
print(f"Segments file: {output_segs_path}")

# Display sample of output files for verification
print("\nSample of dfrac file:")
try:
    with open(output_dfrac_path, "r") as f:
        for i, line in enumerate(f):
            print(line.strip())
            if i >= 3:  # Print first few lines only
                break
except Exception as e:
    print(f"Error reading dfrac file: {e}")

print("\nSample of segments file:")
try:
    with open(output_segs_path, "r") as f:
        for i, line in enumerate(f):
            print(line.strip())
            if i >= 3:  # Print first few lines only
                break
except Exception as e:
    print(f"Error reading segments file: {e}")
