"""

This script loads the sythetic data generated by the _Bradshaw "HDXer" tutorial and extracts the data into the format supported by ValDXer.


raw_data = "mixed_60-40_artificial_expt_resfracs.dat"

This will generate a dfrac file with the headers:
#	0.167   1.0 10.0    60.0    120.0	 times/min

and will then generate a segs file with no headers but columns:

res_start res_end

dfrac_file = "mixed_60-40_artificial_expt_resfracs_TeaA_dfrac.dat
seg_file = "mixed_60-40_artificial_expt_resfracs_TeaA_segs.txt"


"""

import os
import re

# Define file paths
input_file = "mixed_60-40_artificial_expt_resfracs.dat"
_bradshaw_tutorial_dir = "_Bradshaw/Reproducibility_pack_v2/data/artificial_HDX_data"
output_dfrac = "mixed_60-40_artificial_expt_resfracs_TeaA_dfrac.dat"
output_segs = "mixed_60-40_artificial_expt_resfracs_TeaA_segs.txt"

# Ensure output directory exists
output_dir = os.path.join(os.path.dirname(__file__), "_output")
os.makedirs(output_dir, exist_ok=True)

# Full paths for output files
output_dfrac_path = os.path.join(output_dir, output_dfrac)
output_segs_path = os.path.join(output_dir, output_segs)

# Read the raw data file
raw_data_path = os.path.join(os.path.dirname(__file__), _bradshaw_tutorial_dir, input_file)

# Use a custom parser since the data isn't in standard CSV/TSV format
print("Reading raw data file...")
with open(raw_data_path, "r") as f:
    lines = f.readlines()

# Extract header
header = lines[0].strip()
print(f"Header from file: {header}")

# Process data rows
data = []
segments = []

# Skip the header line
for line in lines[1:]:
    # Skip empty lines
    if not line.strip():
        continue

    # Split the line by whitespace
    # The format appears to be: "1 2   1.00000  1.00000  1.00000  1.00000  1.00000"
    # First two numbers are residue IDs, rest are deuteration fractions
    parts = re.split(r"\s+", line.strip())

    # Process line only if it has enough data
    if len(parts) >= 2:
        try:
            # Extract residue IDs (first two values)
            res_start = int(float(parts[0]))  # First residue ID
            res_end = int(float(parts[1]))  # Second residue ID
            segments.append((res_start, res_end))

            # Extract deuteration fractions (remaining values)
            # Filter out any empty strings that might come from extra spaces
            fractions = [float(val) for val in parts[2:] if val]

            # Only add if we have the expected number of fractions
            if len(fractions) == 5:  # Expecting 5 time points
                data.append(fractions)
            else:
                print(f"Warning: Line has unexpected number of fractions: {line.strip()}")

        except (ValueError, IndexError) as e:
            print(f"Error processing line: {line.strip()}")
            print(f"Error details: {e}")

# Define time points (as provided in the example)
time_values = [0.167, 1.0, 10.0, 60.0, 120.0]

print(f"Processed {len(data)} data rows and {len(segments)} segments")

# Create dfrac file
print("Creating dfrac file...")
with open(output_dfrac_path, "w") as f:
    # Write header with time points
    header = "#\t" + "\t".join(f"{t}" for t in time_values) + "\t times/min\n"
    f.write(header)

    # Write deuteration fractions
    for fractions in data:
        f.write("\t".join(f"{frac:.5f}" for frac in fractions) + "\n")

# Create segments file
print("Creating segments file...")
with open(output_segs_path, "w") as f:
    for res_start, res_end in segments:
        f.write(f"{res_start} {res_end}\n")

print("Files created successfully:")
print(f"Deuteration fractions: {output_dfrac_path}")
print(f"Segments file: {output_segs_path}")

# Display sample of output files for verification
print("\nSample of dfrac file:")
try:
    with open(output_dfrac_path, "r") as f:
        for i, line in enumerate(f):
            print(line.strip())
            if i >= 3:  # Print first few lines only
                break
except Exception as e:
    print(f"Error reading dfrac file: {e}")

print("\nSample of segments file:")
try:
    with open(output_segs_path, "r") as f:
        for i, line in enumerate(f):
            print(line.strip())
            if i >= 3:  # Print first few lines only
                break
except Exception as e:
    print(f"Error reading segments file: {e}")


HDX_intrinsic_rates = """# ResID  Intrinsic rate / min^-1 
      2    163227.81828442
      3      1029.89790963
      4      1182.48101311
      5      1129.26060126
      6      1421.65486872
      7      1006.45457572
      8      1357.66985767
      9       696.29644347
     10       481.71944856
     11      1103.55549088
     12       837.13245595
     13      2359.35988855
     14       167.02988712
     15      1053.88731282
     16      2528.09960415
     17       167.02988712
     18       528.19486730
     19      1454.76946418
     20      1454.76946397
     21      2008.14087714
     22       729.11188408
     23      1326.76551855
     24      1558.81356496
     25      1006.45457341
     26       283.65743840
     27       712.51526984
     28      1129.26070603
     29      2586.98658673
     30      6205.74857138
     31      3182.68882127
     32      5281.94866706
     33      7291.11882135
     34       400.67678123
     35      1053.88731282
     36       400.67678147
     37       492.94013192
     38      1709.20508433
     39      1210.02453454
     40      1357.66985831
     41      1454.76946312
     42       235.93598383
     43       729.11188502
     44      1454.76946312
     45      2102.78164213
     46      3182.68882127
     47      1053.88750906
     48       155.88135935
     49       729.11188249
     50      1267.05123340
     51      1029.89791222
     52      1709.20508419
     53      2305.65421729
     54      6205.74857055
     55      2470.55300714
     56       348.97488878
     57       196.24300112
     58       897.00358062
     59      1155.56445955
     60       290.26466884
     61      2836.57437976
     62      3039.44420937
     63      4707.54170246
     65       680.44680228
     66      1078.43550401
     67      1238.20962611
     68      1874.10610826
     69      4393.33354275
     70       664.95794030
     71       145.47694677
     73      1709.20508515
     74      2528.09957894
     75      1454.76946397
     76       373.93332937
     77       429.33290633
     78       837.13244865
     79       270.89075045
     81       391.55626544
     82       373.93332969
     83       763.47386758
     85       620.57485765
     86      2528.09959386
     87       818.07699266
     88      2054.91651074
     89       712.51527346
     90       400.67678123
     91       241.43163609
     92       606.44884922
     93       516.17168731
     94       837.13244865
     95      1831.44626299
     96       649.82165206
     97      2102.78164213
     98      2305.65421727
     99      1670.29882931
    100       235.93598104
    101      2305.65421698
    102      2054.91648411
    103       876.58528776
    104       939.27805629
    106       664.95794074
    107       439.33335478
    108       419.56009763
    109      1421.65486872
    110       983.54486703
    111      5659.70996393
    112      7994.55281396
    113       492.94013356
    114       606.44884922
    115       235.93598383
    116       205.49164965
    117       712.51527077
    118      1632.27818361
    119       876.58528604
    121      1267.05123403
    122      2902.64668612
    123      1454.76946312
    124       876.58528776
    125       325.68231520
    126       183.14462497
    127       781.25745788
    128      2008.14087584
    129      1595.12304714
    130       649.82165206
    132       135.76698620
    133       635.02990259
    134      4707.54170199
    136       565.97099671
    137      1129.26070603
    138       481.71945087
    139      1831.44626299
    140      2586.98658673
    141      2414.31635340
    142      1523.33063516
    143       311.02419623
    144       897.00357941
    145      1789.75743804
    146      1962.43000714
    147      1389.29405090
    148      6205.74857021
    150       191.77596574
    151       205.49164965
    152       781.25746219
    153       983.54486703
    154       763.47386864
    155      1078.43550159
    156      1296.56464832
    157      1670.29882931
    158       729.11188408
    159      1357.66985831
    160      1874.10611777
    161      1078.43550179
    163       620.57485765
    165       191.77596574
    167       283.65743957
    168       917.89747785
    169      1454.76946312
    170       178.97574618
    171       492.94013192
    172      1326.76551956
    173      1749.01759097
    174       492.94013356
    175       897.00358062
    176      1709.20508419
    177      1874.10610826
    178       348.97488878
    179       138.92940524
    180       939.27806859
    181       781.25747232
    182      2151.76171741
    183      1558.81356338
    184      2772.00606657
    186       135.76698620
    187       429.33290633
    188       565.97099715
    189       183.14462466
    190       579.15415444
    191      2102.78164213
    192      2359.35980401
    193      1749.01759097
    194       492.94013356
    195       419.56009763
    196      1103.55549088
    197       178.97574618
    198      2151.76171492
    200      2253.17112016
    201       696.29644309
    202       664.95794037
    203      1155.56445915
    204      1238.20962611
    205      4707.54170199
    206     15951.22995271
    207      7994.55281396
    208       729.11188642
    209       565.97099690
    210      1238.20962611
    211      1709.20508398
    212      2008.14087584
    213      1238.20962721
    214      1595.12299601
    215      1632.27818627
    216      3915.56263972
    217      3039.44420937
    218      2528.09960415
    219       481.71945087
    220       781.25745830
    221      1103.55549088
    222       837.13245595
    223       492.94013356
    224      1831.44624546
    225      1962.43000697
    226       696.29644347
    227      1129.26070603
    228       961.15666016
    229      2305.65421772
    230       528.19486726
    231       155.88135718
    232      1053.88731282
    233      2528.09960415
    234       837.13247276
    235      1267.05123950
    236      1595.12304714
    237       837.13247276
    238      1267.05123950
    239       680.44680228
    240      1789.75745967
    241      5281.94866706
    242      7291.11882135
    243       373.93332921
    244       579.15415444
    245       712.51528277
    246       325.68231538
    247       680.44680020
    248      1558.81356496
    249       492.94013356
    250      1831.44624546
    251      1962.43000697
    252       696.29644347
    253      2102.78164213
    254       664.95794030
    255       606.44884922
    256       818.07699064
    257       311.02419623
    258       680.44680020
    259      1670.29882931
    260      1267.05123950
    261      2970.25801318
    262      3182.68882127
    263       649.82165206
    264       178.97574618
    265       781.25745788
    266       400.67678123
    267       781.25745788
    268      2414.31635264
    269       553.08792429
    270      2414.31635334
    271      3332.68434065
    272       649.82165206
    273      1029.89791222
    274       373.93332937
    275       856.63176813
    276      2008.14087714
    277       729.11188408
    278      1326.76551855
    279      1296.56464798
    280      1078.43550416
    281      2102.78164041
    283       837.13244934
    284       400.67678147
    285       712.51526984
    286       696.29644347
    287       818.07699064
    288       961.15665275
    289       270.89075045
    290       579.15415444
    291       876.58528776
    292      1389.29405090
    293      1874.10610826
    294      1454.76946312
    295      1029.89791222
    296      1874.10610904
    297      2151.76171741
    298      1558.81356338
    299       235.93598383
    300       205.49164965
    301       983.54490469
    302       961.15666016
    303      1155.56445955
    304      1326.76551855
    305      1670.29882931
    306      1595.12304714
    307       220.18827496
    308       712.51527077
    309      1670.29882931

"""

TeaA_HDXer_intrinsic_rates_file = "out__train_TeaA_auto_VAL_1Intrinsic_rates.dat"

TeaA_HDXer_intrinsic_rates_path = os.path.join(
    os.path.dirname(__file__), TeaA_HDXer_intrinsic_rates_file
)

# Write out the HDXer intrinsic rates to file
print("Writing HDXer intrinsic rates file...")
with open(TeaA_HDXer_intrinsic_rates_path, "w") as f:
    f.write(HDX_intrinsic_rates)

print(f"HDXer intrinsic rates file: {TeaA_HDXer_intrinsic_rates_path}")
